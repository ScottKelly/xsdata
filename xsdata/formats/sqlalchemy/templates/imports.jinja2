
from dataclasses import dataclass, field
from datetime import timedelta, datetime, timezone, time, date
from decimal import Decimal
from enum import Enum
from typing import List, Optional, Union

from sqlalchemy.dialects.postgresql import JSONB, ARRAY
from sqlalchemy.orm import validates, relationship, registry
from xsdata.models.datatype import XmlDateTime, XmlDate
from xsdata.formats.dataclass.models.elements import XmlType

from sqlalchemy import Column, ForeignKey, String, Integer, Numeric, Boolean, \
    LargeBinary, Enum as SqlEnum, func as sql_func, orm, Interval, BigInteger

from common.db import SqlXmlDateTime, StringEnum, XmlJSONB, SqlXmlDuration, SqlXmlTime, SqlXmlDate
# import to trigger registration of new converters
import common.converters

from connexxus.models.registry import connexxus_registry


{% for source, items in imports|groupby("source") -%}
{%- if items|length == 1 -%}
from {{ source | import_module(module)  }} import {{ items[0].name | import_class(alias=items[0].alias) }}
{% else -%}
from {{ source | import_module(module) }} import (
{%- for item in items %}
    {{ item.name | import_class(alias=item.alias) }},
{%- endfor %}
)
{% endif %}
{%- endfor %}
