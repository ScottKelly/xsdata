{% set level = level|default(0) -%}
{% set help | format_docstring(level + 1) %}
    {%- include "docstrings." + docstring_name + ".jinja2" -%}
{% endset -%}
{% set parent_namespace = obj.namespace if obj.namespace is not none else parent_namespace|default(None) -%}
{% set parents = parents|default([obj.name]) -%}
{% set class_name =  obj.name|class_name(parents) -%}
{% set table_name = parents|table_name %}
{% set local_name =  obj.meta_name or obj.name -%}
{% set local_name = None if class_name == local_name or parents|length != 1 else local_name -%}
{% set base_classes = obj.extensions|map(attribute='type')|map('type_name')|join(', ') -%}
{% set target_namespace = obj.target_namespace if level == 0 and module_namespace != obj.target_namespace else None %}

{%- for inner in obj.inner %}
    {%- set tpl = "enum.jinja2" if inner.is_enumeration else "class.jinja2" -%}
    {%- set inner_parents = parents + [inner.name] -%}
        {%- with obj=inner, parents=inner_parents -%}
            {% include tpl %}
        {%- endwith -%}
{%- endfor %}


@{{ obj|schema_name }}_registry.mapped
{{ class_annotation }}
class {{ class_name }}{{ "({})".format(base_classes) if base_classes }}:
{%- if help %}
{{ help|indent(4, first=True) }}
{%- endif %}

    {{ "__tablename__ = '{}'".format(table_name) if not base_classes }}
    __sa_dataclass_metadata_key__ = "sa"
    __mapper_args__ = {
        'polymorphic_identity': '{{ class_name }}',
        {{ "'polymorphic_on': 'entity_type'" if not base_classes }}
    }


{%- if local_name or obj.is_nillable or obj.namespace is not none or target_namespace %}
    class Meta:
        {%- if local_name %}
        name = "{{ local_name }}"
        {%- endif %}
        nillable = True
        {%- if obj.namespace is not none %}
        namespace = "{{ obj.namespace }}"
        {%- endif %}
        {%- if target_namespace and target_namespace != obj.namespace %}
        target_namespace = "{{ target_namespace }}"
        {%- endif %}
{%- endif %}

    # XML Fields
{%- for attr in obj.attrs %}
    {%- set field_typing = attr|field_type(parents) -%}
    {%- set field_definition = attr|field_definition(obj.ns_map, parent_namespace, parents) -%}
    {%- set attr_name = attr.name|field_name(obj.name) %}
    {% if attr|is_many_to_one(parents) %}
    {{ attr_name }}_id: int = {{ attr|relationship_definition(obj.ns_map, parent_namespace, parents) }}
    {% endif %}
    {{ attr_name }}: {{ field_typing }} = {{ field_definition }}
    {% if attr|is_timezone_aware(parents) %}
    {{ attr_name }}_utc_offset: timedelta =  field(default=None, init=False, metadata={"type": XmlType.IGNORE, "sa": Column(Interval)})
    @validates("{{ attr_name }}")
    def validate_{{ attr_name }}(self, key, {{ attr_name }}):
        if isinstance({{ attr_name }}, XmlDateTime) or isinstance({{ attr_name }}, XmlDate):
            self.{{ attr_name }}_utc_offset = {{ attr_name }}.to_datetime().utcoffset()
        return {{ attr_name }}

    @property
    def {{ attr_name }}_with_utc_offset(self) -> datetime:
         return self.{{ attr_name }}.to_datetime().astimezone(tz=timezone(self.{{ attr_name }}_utc_offset))

    {% endif %}
{% endfor %}

    # XML-Defined Inner Classes
{%- for inner in obj.inner -%}
    {%- set inner_parents = parents + [inner.name] -%}
    {%- set inner_class_name = inner.name | class_name() %}
    {{ inner_class_name }} = {{ inner.name | class_name(inner_parents) }}
{% endfor -%}

{%- if not base_classes %}
    # Database Fields
    id: int = field(init=False, metadata={"type": XmlType.IGNORE, "sa": Column(Integer, primary_key=True)})
    """Auto-incrementing primary key."""

    created_timestamp: Optional[XmlDateTime] = field(init=False, metadata={"type": XmlType.IGNORE, "sa": Column(SqlXmlDateTime(timezone=True), default=sql_func.now())})
    """Time when object was created. Stored in DB as UTC"""

    entity_type: str = field(init=False, metadata={"type": XmlType.IGNORE, "sa": Column(String(75))})
    """SQLAlchemy polymorphic entity discriminator"""
{% endif %}

    # Backwards Relationships for SQLAlchemy
{%- for relationship in obj|relationship_backrefs(parents) %}
    {{ relationship }}
{% endfor -%}




